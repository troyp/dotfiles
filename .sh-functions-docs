#                                                           -*- shell-script -*-
[[ ! -z $DEBUG  ]] && echo "sourcing .sh-functions-docs"


# ───────────────────────────────────────────────────────────────────────────────
# ╭─────────────╮
# │ CSV and TSV │
# ╰─────────────╯

# eg. ... | csv_nlines2row 3
# collects every 3 lines of input into a row of CSV
csv_nlines2row() { sed -r 's/^ *| *$//g'|awk -v N=$1 'ORS=NR%N?",":RS'; }

# ───────────────────────────────────────────────────────────────────────────────
# ╭──────────────────────────────╮
# │ eBook Search & Run Functions │
# ╰──────────────────────────────╯

comicsrun() {
    find -L ~/Documents/Comics -type f -iname "*$1*" |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 mcomix "$f";
}
comicsrunre() {
    find -L ~/Documents/Comics -type f -regextype egrep -iregex ".*$1.*" |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 mcomix "$f";
}
sff() {
    f=`sffind "$@" | iselect -ma`;
    mimeopen -n "$f" &
}
sfrun() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
sfrun PATTERN
    Search for SF books matching PATTERN, select one and open with mimeopen.

    Options:
        -d    Use default application
    EOF
        return 0; fi;
    local opts mimetype app exec;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/fiction/sf-fantasy /mnt/data2/SFF -iname "*$1*" | peco | read -r f;
    if [[ -n $opts ]]; then
        mimetype=$(xdg-mime query filetype "$f");
        app=$(xdg-mime query default "$mimetype");
        # This works only with simple Exec= lines, but good enough
        exec=$(grep "^Exec=" $app | sed -r 's/Exec=([^ ]+) .*/\1/');
        kstart5 $exec "$f";
    else
        [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
    fi;
}
sfrunre() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
sfrunre REGEX
    Search for SF books matching REGEX, select one and open with mimeopen.

    Options:
        -d    Use default application
EOF
        return 0; fi;
    local opts mimetype app exec;
    if [[ $1 =~ ^-d$ ]]; then local opts="d"; shift; fi;
    find -L ~/ebooks/fiction/sf-fantasy /mnt/data2/SFF -regextype egrep -iregex ".*$1.*" |
        peco |
        read -r f;
    if [[ -n $opts ]]; then
        mimetype=$(xdg-mime query filetype "$f");
        app=$(xdg-mime query default "$mimetype");
        # This works only with simple Exec= lines, but good enough
        exec=$(grep "^Exec=" $app | sed -r 's/Exec=([^ ]+) .*/\1/');
        kstart5 $exec "$f";
    else
        [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
    fi;
}
csrun() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
csrun PATTERN
    Search for CS books matching PATTERN, select one and open with mimeopen.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-d$ ]]; then local opts="d"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/cs -iname "*$1*" |
        if [[ $opts = a ]]; then
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|maff|mht)$|^[^.]+$';
        elif [[ $opts = A ]]; then
            cat
        else
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2|maff|mht)$|^[^.]+$';
        fi |
        peco |
        read -r f;
    [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
}
csrunre() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
csrunre REGEX
    Search for CS books matching REGEX, select one and open with mimeopen.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/cs -regextype egrep -iregex ".*$1.*" |
        if [[ $opts = a ]]; then
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|maff|mht)$|^[^.]+$';
        elif [[ $opts = A ]]; then
            cat
        else
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2|maff|mht)$|^[^.]+$';
        fi |
        peco |
        read -r f;
    [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
}
csokular() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
csokular PATTERN
    Search for CS books matching PATTERN, select one and open with okular.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/cs -iname "*$1*" |
        {
            if [[ $opts = a ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md)$';
            elif [[ $opts = A ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|tiff|jpg|png)$';
            else
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2)$';
            fi;
        } |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 okular "$f";
}
csokularre() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
csokularre REGEX
    Search for CS books matching REGEX, select one and open with okular.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/cs -regextype egrep -iregex ".*$1.*" |
        {
            if [[ $opts = a ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md)$';
            elif [[ $opts = A ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|tiff|jpg|png)$';
            else
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2)$';
            fi;
        } |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 okular "$f";
}
papersrun() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
papersrun PATTERN
    Search for papers matching PATTERN, select one and open with mimeopen.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-d$ ]]; then local opts="d"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/papers -iname "*$1*" |
        if [[ $opts = a ]]; then
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|maff|mht)$|^[^.]+$';
        elif [[ $opts = A ]]; then
            cat
        else
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2|maff|mht)$|^[^.]+$';
        fi |
        peco |
        read -r f;
    [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
}
papersrunre() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
papersrunre REGEX
    Search for papers matching REGEX, select one and open with mimeopen.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/papers -regextype egrep -iregex ".*$1.*" |
        if [[ $opts = a ]]; then
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|maff|mht)$|^[^.]+$';
        elif [[ $opts = A ]]; then
            cat
        else
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2|maff|mht)$|^[^.]+$';
        fi |
        peco |
        read -r f;
    [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
}
papersokular() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
papersokular PATTERN
    Search for papers matching PATTERN, select one and open with okular.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/papers -iname "*$1*" |
        {
            if [[ $opts = a ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md)$';
            elif [[ $opts = A ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|tiff|jpg|png)$';
            else
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2)$';
            fi;
        } |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 okular "$f";
}
papersokularre() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
papersokularre REGEX
    Search for papers matching REGEX, select one and open with okular.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/coding ~/ebooks/papers -regextype egrep -iregex ".*$1.*" |
        {
            if [[ $opts = a ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md)$';
            elif [[ $opts = A ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|tiff|jpg|png)$';
            else
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2)$';
            fi;
        } |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 okular "$f";
}

scirun() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
scirun PATTERN
    Search for science books matching PATTERN, select one and open with mimeopen.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-d$ ]]; then local opts="d"; shift; fi;
    find -L ~/ebooks/science ~/ebooks/cs ~/ebooks/philosophy -iname "*$1*" |
        if [[ $opts = a ]]; then
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|maff|mht)$|^[^.]+$';
        elif [[ $opts = A ]]; then
            cat
        else
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2|maff|mht)$|^[^.]+$';
        fi |
        peco |
        read -r f;
    [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
}
scirunre() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
scirunre REGEX
    Search for science books matching REGEX, select one and open with mimeopen.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/science ~/ebooks/cs ~/ebooks/philosophy -regextype egrep -iregex ".*$1.*" |
        if [[ $opts = a ]]; then
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|maff|mht)$|^[^.]+$';
        elif [[ $opts = A ]]; then
            cat
        else
            egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2|maff|mht)$|^[^.]+$';
        fi |
        peco |
        read -r f;
    [[ -n $f ]] && { mimeopen -a "$f" || mimeopen -n "$f"; };
}
sciokular() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
sciokular PATTERN
    Search for science books matching PATTERN, select one and open with okular.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/science ~/ebooks/cs ~/ebooks/philosophy -iname "*$1*" |
        {
            if [[ $opts = a ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md)$';
            elif [[ $opts = A ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|tiff|jpg|png)$';
            else
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2)$';
            fi;
        } |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 okular "$f";
}
sciokularre() {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
sciokularre REGEX
    Search for science books matching REGEX, select one and open with okular.

    Options:
        -a    Search all supported filetypes except images
        -A    Search all supported filetypes
EOF
        return 0; fi;
    if [[ $1 =~ ^-a$\|^-A$ ]]; then local opts="${1#-}"; shift; fi;
    find -L ~/ebooks/science ~/ebooks/cs ~/ebooks/philosophy -regextype egrep -iregex ".*$1.*" |
        {
            if [[ $opts = a ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md)$';
            elif [[ $opts = A ]]; then
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|xps|dvi|fb2|md|tiff|jpg|png)$';
            else
                egrep -i '\.(pdf|ps|djvu|chm|cbz|cbr|epub|mobi|fb2)$';
            fi;
        } |
        peco |
        read -r f;
    [[ -n $f ]] && kstart5 okular "$f";
}

rlist() {
    f=`realpath "$1"`;
    name=${f##*/};
    ln -s "$f" ~/.readinglist;
}

rlistls() {
    for f in ~/.readinglist/*; do realpath "$f"; done;
}

rlistadd() {
    (
        initd="$1:-$PWD";
        cd ~/.readinglist;
        x=$(find -H "$1" -type f | peco)
        ln -s "$x";
    )
}

rlistaddsf() {
    (
        cd ~/.readinglist;
        x=$(find -H ~/ebooks/fiction/sf-fantasy/ ~/ebooks/fiction/SFF/ -type f | peco)
        ln -s "$x";
    )
}

rlistrun() {
    (
        cd ~/.readinglist;
        rlistls | peco | read -r x; mimeopen -n "$x" &
    )
}

rlistrm() {
    (
        cd ~/.readinglist;
        ls | peco | read -r x; rm "$x";
    )
}

rlistsearch() {
    (
        find -L ~/.readinglist -type f -iname '*.txt' -printf "%f\n" |
            grep -iP "$1" |
            fzf --select-1 --exit-0 --delimiter "/" --with-nth "-1" --no-preview |
            read -r x && percol "$HOME/.readinglist/$x";
    )
}

rlistless() {
    (
        find -L ~/.readinglist -type f -iname '*.txt' -printf "%f\n" |
            grep -iP "$1" |
            fzf --select-1 --exit-0 --delimiter "/" --with-nth "-1" --no-preview |
            read -r x && $PAGER "$HOME/.readinglist/$x";
    )
}

manuals() {
    (
        cd ~/ebooks/articles/manuals;
        ls | peco | read -r x; mimeopen -n "$x" &
    )
}

# ───────────────────────────────────────────────────────────────────────────────
# ╭───────────────╮
# │ PDF Functions │
# ╰───────────────╯

pdfcat () {
    pdftotext "$1" -;
}

pdfoutline-out () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
pdfoutline-out PDFFILE [OUTFILE]
    Output the bookmarks (outline) of PDFFILE to text file OUTFILE.
    If OUTFILE is -, the bookmarks are output to stdout.
EOF
        return;
    fi;
    local pdffile outfile;
    pdffile="$1";
    outfile="${2:-${1%.pdf}.bmarks}";
    if [[ "$outfile" == "-" ]]; then
        pdftk "$1" dump_data;
    else
        pdftk "$1" dump_data output "$outfile";
    fi;
}

pdfoutline-in () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
pdfoutline-in PDFFILE BMARKS [OUTFILE]
    Updates the bookmarks of PDFFILE to match those of the BMARKS file and saves
    the result to OUTFILE.
EOF
        return;
    fi;
    local pdffile bmarks outfile;
    pdffile="$1";
    bmarks="$2";
    outfile="${3:-${1%.pdf}-updated.pdf}";
    pdftk "$pdffile" update_info "$bmarks" output "$outfile";
}

pdfoutline-edit () {
    # pdfoutline-edit PDF_DOC
    # edit bookmarks of PDF_DOC
    local outline output;
    outline=$(mktemp);
    output=$(mktemp);
    pdftk "$1" dump_data > $outline;
    `echo ${EDITOR:-vim} $outline`;
    pdftk "$1" update_info $outline output $output;
    mv -i $output "$1";
}

pdfdroplast () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
pdfdroplast [-o outfile] infile [last_page]
    Create a new PDF by dropping the last page(s) of an input file.
    PDF bookmarks are lost.

    The new file is saved with the suffix '_out' (before the extension), unless
    a name is given explicitly with the -o option.
    Options:
      -h --help     display this help
      -o --outfile  save resulting file under the specified name
EOF
        return 0;
    fi;
    local outfile infile infile_base n m;
    if [[ "$1" =~ ^-o$\|^--outfile$ ]]; then
        shift;
        outfile="$1";
        shift;
    fi;
    infile="$1";
    infile_base="${infile%.*}";
    outfile="${outfile:-${infile_base}_out.pdf}";
    n="${2:-1}";
    m=$((n+1));
    echo "pdftk '$infile' cat 1-r$m output '$outfile'";
    eval "pdftk '$infile' cat 1-r$m output '$outfile'";
}

pdf-extract-images () {
    local imgdir;
    imgdir="${1}-images";
    mkdir "$imgdir";
    pdfimages "$1" "$imgdir"/out;
}

pdfpagerange () {
    # requres qpdf
    # eg. pdfpagerange "input.pdf" 75-77
    #     pdfpagerange "input.pdf" 75-77 "output.pdf"
    # NOTE: Page ranges use absolute numbering starting from page 1, not the page numbers specified in the pdf.
    local input range output;
    input="$1";
    range="$2";
    output="${3:-$input [pages $range]}";
    qpdf --pages "$input" "$range" -- "$input" "$output";
}

# ───────────────────────────────────────────────────────────────────────────────
# ╭────────────────╮
# │ DJVU Functions │
# ╰────────────────╯

djvuoutline-out () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
djvuoutline-out DJVUFILE [OUTFILE]
    Output the bookmarks (outline) of DJVUFILE to text file OUTFILE.
    If OUTFILE is -, the bookmarks are output to stdout.
EOF
        return;
    fi;
    local djvufile outfile;
    djvufile="$1";
    outfile="${2:-${1%.djvu}.bmarks}";
    if [[ "$outfile" == "-" ]]; then
        djvused "$djvufile" -e 'print-outline';
    else
        djvused "$djvufile" -e 'print-outline' > "$outfile";
    fi;
}

djvuoutline-in () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
djvuoutline-in DJVUFILE BMARKS [OUTFILE]
    Updates the bookmarks of DJVUFILE to match those of the BMARKS file and
    saves the result to OUTFILE.
EOF
        return;
    fi;
    local djvufile bmarks outfile;
    djvufile="$1";
    bmarks="$2";
    outfile="${3:-${1%.djvu}-updated.djvu}";
    djvused "$djvufile" -e "set-outline \"$bmarks\"; save-bundled \"$outfile\"";
}

djvuoutline-edit () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
djvuoutline-edit DJVUFILE [OUTFILE]
    Edit the bookmarks (outline) of DJVUFILE and save to OUTFILE.
    If OUTFILE is omitted, overwrite DJVUFILE.
EOF
        return;
    fi;
    local djvufile outfile outline;
    djvufile="$1";
    outfile="$2";
    # djoutline-edit DJVU_DOC;
    # edit bookmarks of DJVU_DOC
    outline=$(mktemp);
    djvused "$djvufile" -e 'print-outline' > $outline;
    `echo ${EDITOR:-vim} $outline`;
    echo "$outfile";
    if [[ -z "$outfile" ]]; then
        djvused "$djvufile" -e "set-outline $outline; save";
    else
        djvused "$djvufile" -e "set-outline $outline; save-bundled \"$outfile\"";
    fi
}

# ───────────────────────────────────────────────────────────────────────────────
# ╭───────────────╮
# │ CBZ Functions │
# ╰───────────────╯

zcbz () { zip -r "${1%/}.cbz" "$1"; }

# convert directory to .cbz, order by first number in file names
# cbz-by-num DIRNAME [EXT]
cbz-by-num () {
    local n fname fnum fext ext padded;
    pushd "$1" || return;
    # n=`ls -v | tail -n1 | awk -F'.' '{ print(length($1)) }'`;
    n=`ls -pv | GREP_OPTIONS="" grep -v ".*/$" | tail -n1 | awk -F'.' '{ print(length($1)) }'`;
    for fname in *; do
	      fnum="${fname%.*}";
	      fext="${fname##*.}";
	      ext="${2:-$fext}";
	      padded=`printf "%0${n}d.%s" "$(expr $fnum + 0)" "$ext"`;
	      mv -i "$fname" "$padded";
	      # echo "$fname    $padded";
    done;
    popd;
    zip -r "${1%/}.cbz" "$1";
}

cbz_blankpage_before () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
cbz_blankpage_before [-h] N CBZFILE [COLOUR]

Create a blank page with the same dimensions as the Nth file in the CBZFILE.
If COLOUR is unspecified, it is white. This can be used to add a page at a
specific position to a comic archive directory.

    Options:
      -h --help     display this help
EOF
        return 0
    fi
    local n cbzfile col cbzname tempdir origdir f base ext newname geom;
    n="$1"
    cbzfile="$2"
    col="${3:-xc:white}"

    cbzname=`echo "${cbzfile%.*}"`
    tempdir=`mktemp -d`
    mkdir "$tempdir/$cbzname"
    unzip "$cbzfile" -d "$tempdir/$cbzname"
    origdir="$PWD"    # issue with pushd
    cd "$tempdir/$cbzname"
    cd *

    f=$(ls | sed -n "`printf "%dp;" $n`")
    base=`echo "${f%.*}"`
    ext=`echo "${f##*.}"`
    newname="${base}-prev.${ext}"
    geom=`convert "$f" -print "%wx%h\n" /dev/null`
    convert -size "$geom" "$col" "$newname"

    cd "$origdir"
    mv "$cbzfile" "$cbzfile.bk"
    zip -r "$cbzfile" "$tempdir"

}

cbr2cbz() {
    local archive name;
    archive="$1";
    name="${1%.*}";
    mkdir -- "$name";
    7z x "$archive" -o"$name";
    7z a -tzip "$name.cbz" -- "$name";
    trash "$archive";
    trash -- "$name/"
}

# ───────────────────────────────────────────────────────────────────────────────
# ╭─────────────────╮
# │ Other Functions │
# ╰─────────────────╯

maffus () {
    local archive_name;
    archive_name=`echo "${1%/}" | sed -e 's/ /_/g'`.maff;
    7z a -tzip "$archive_name" "$1";
}

man2text () { man "$1" | \col -bx; }

blankpage () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
blankpage                - creates a white 1000x1600 page called 'out.jpg'
blankpage NAME           - creates a white 1000x1600 page called NAME
blankpage SIZE NAME      - creates a white page of size SIZE called NAME
blankpage SIZE COL NAME  - creates a page of size SIZE and colour COL, called NAME
EOF
    fi;
    local size col out;
    # requires imagemagick/graphicsmagick
    case "$#" in
        0)
            size="1000x1600";
            col="xc:white";
            out="out.jpg";
            ;;
        1)
            size="1000x1600";
            col="xc:white";
		        out="$1";
		        ;;
	      2)
		        size="$1";
		        col="xc:white";
		        out="$2";
		        ;;
	      3)
		        size="$1";
		col="xc:$2";

    out="$3";
    ;;
    esac;
    convert -size "$size" "$col" "$out";
}

blankpage_before () {
    if [[ "$1" =~ ^-h$\|^--help$ ]]; then
        cat <<EOF
blankpage_before [-h] N [COLOUR]

Create a blank page with the same dimensions as the Nth file in the current
directory. If COLOUR is unspecified, it is white. This can be used to add a
page at a specific position to a comic archive directory.

    Options:
      -h --help     display this help
EOF
        return 0;
    fi;
    local n col f base ext newname geom;
    n="$1";
    col="${2:-xc:white}";
    f=$(ls | sed -n "`printf "%dp;" $n`");
    base=`echo "${f%.*}"`;
    ext=`echo "${f##*.}"`;
    newname="${base}-prev.${ext}";
    geom=`convert "$f" -print "%wx%h\n" /dev/null`;
    convert -size "$geom" "$col" "$newname";
}

googlecodewiki2gfm() {
    local converter_dir converter infile outfile;
    converter_dir="${GOOGLE_WIKI2GFM_PATH:-/opt/google-code-support-tools/wiki_to_md/}";
    converter="${converter_dir%/}/wiki2gfm.py";
    infile="$1";
    outfile="${2:-$infile.md}";
    echo "$converter" --input_file "$infile" --output_file "$outfile";
    python2 "$converter" --input_file "$infile" --output_file "$outfile";
}

tsvtotable () {
    # TODO: finish
    printf '<html>\n<head>\n';
    printf '<meta http-equiv="content-type" content="text/html; charset=UTF-8">\n';
    printf '<style>\ntable {\nborder-collapse="collapse";\n}\ntd {\n';
    printf "border='1px solid black';\npadding='5px';\n";
    printf '}\n</style>\n</head>\n<body>\n<div>\n<table>\n';
    while read -r line; do
        sed 's:^:<tr><td>:; s:\t:</td><td>:g; s:$:</td></tr>\n:';
    done;
    printf '</table>\n</div>\n</body>\n</html>\n';
}

chm2html() {
    local file dir;
    file="$1";
    dir="$2";
    archmage "$file" "$dir";
    # correct erroneous wrapping of index links
    printf '\na { white-space: nowrap; }' >> "$dir"/arch_css.css;
}

chm2maff() {
    local file dir;
    file="$1";
    dir="$2";
    archmage "$file" "$dir";
    # correct erroneous wrapping of index links
    printf '\na { white-space: nowrap; }' >> "$dir"/arch_css.css;
    7z a -tzip "$dir.maff" "$dir";
    rm -Ir "$dir";
}
