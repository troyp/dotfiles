"  _______________ 
" |               |
" | PENTADACTYLRC |
" |_______________|

set runtimepath=~/.pentadactyl
set guioptions=bBCrMNsT
" js dactyl.plugins.buftabs.buftabs._options=true   
set hintkeys="jfkdls;ahgnvurieow"
set hinttags+='svg'
set incfind
set hlfind
set findcase=smart
set showstatuslinks=status
set wildmode=list:longest,list:full
set strictfocus=mail.google.com:laissez-faire,'chrome:*':laissez-faire,*:moderate
" Ex commands output in a new tab by default (prefs, addons...)
set newtab=all
" make yanks go to clipboard
js editor.defaultRegister="+"
set! browser.tabs.closeWindowWithLastTab=false
set editor='roxterm --replace -e vim -f +<line> +"sil! call cursor(0, <column>)" <file>'

source ~/.pentadactylrc.js

" PREFIX KEYS: c e s ss x, <C-c>
" c : site-specific bindings
" x : global bindings
" s : selection bindings
" <C-c> : GUI commands, etc.

" Repeat last ex command
map -g user -b <C-.> @:

" Copying
map -g user -b <A-w> Y

" A-Esc: Pass-through Escape
map -g user -b <A-Esc> <C-v><Esc>

" C-' Firefox link search
map -g user -b "<C-'>" <C-v>'

" C-w closes tab; if last in window closes window.
map -g user -b <C-w> :q<CR>
map -g user -b J <C-d>
map -g user -b K <C-u>
map -g user -b <C-m><C-m> :emenu<SPACE>

" M-Up toggles the navigation and bookmarks toolbars:
map -g user -b <A-Up> :set guioptions-=mTB | set showtabline=never<CR>
map -g user -b <A-Down> :set guioptions+=TB | set showtabline=always<CR>
map -g user -b <C-c><C-a> :set guioptions!=TB | set showtabline!=always,never<CR>
map -g user -b <C-c><C-m> :set guioptions!=m<CR>
map -g user -b <C-c><C-t> :set showtabline!=always,never<CR>
map -g user -b <C-c><C-n> :set guioptions!=T<CR>
map -g user -b <C-c><C-b> :set guioptions!=B<CR>
map -g user -b bb :set guioptions!=B<CR>
map -g user -b <C-c><C-s> :set guioptions!=B<CR>
map -g user -b <C-S-d> :dialog downloads<CR>
"map -g user -b <C-c><C-f> :buftabs<CR>

" Restart with C-c C-c:
" (note: C-c C-r broke for unknown reason)
map -g user -b <C-c><C-c> :restart<CR>
" reload .pentadactylrc
map -g user -b <C-c>l :rc<CR>

" Select:
map -g user -b s <pass>
map -g user -b sk :bmarks!<SPACE>
map -g user -b s;k :bmarks<SPACE>
map -g user -b sh :history!<SPACE>
map -g user -b s;h :history<SPACE>
map -g user -b st :buffer<SPACE>
map -g user -b sj :jumps<CR>
map -g user -b sa :addons<CR>
map -g user -b sc :set<SPACE>
map -g user -b sc :set!<SPACE>

" Manual sidebar selection with si, toggle with S
map -g user -b si :sidebar<SPACE>
" map -g user -b S :sidebar!<CR>
" Open/close AiOS, switch focus
map -g user -b S :js aios_toggleSidebar()<CR><f6><f6>
" Open AiOS, switch focus and enter passthrough
map -g user -b sS :js aios_toggleSidebar()<CR><f6><f6><C-z>

" Sidebar selection:
map -g user -b sA :sidebar Add-ons<CR>
map -g user -b ssA :sidebar Add-ons<CR><f6><f6><C-z>
map -g user -b sM :sidebar Bookmarks<CR>
map -g user -b ssM :sidebar Bookmarks<CR><f6><f6><C-z>
map -g user -b sD :sidebar Downloads<CR>
map -g user -b ssD :sidebar Downloads<CR><f6><f6><C-z>
map -g user -b sH :sidebar History<CR>
map -g user -b ssH :sidebar History<CR><f6><f6><C-z>
map -g user -b sM :sidebar Moji<CR>
map -g user -b ssM :sidebar Moji<CR><f6><f6><C-z>
map -g user -b sO :sidebar HeadingsMap<CR>
map -g user -b ssO :sidebar HeadingsMap<CR><f6><f6><C-z>
map -g user -b sP :sidebar Preferences<CR>
map -g user -b ssP :sidebar Preferences<CR><f6><f6><C-z>


" Output newline in 'Pentadactyl Output <Date>' file:
command! outputnewline :execute "!echo >> \"Pentadactyl Output " + Date().slice(0,15) + "\""
map -g user -b <C-c>0 :outputnewline<CR>

" ------
"  TABS:
" ------
"
" DuckDuckGo search:    d
" Google search:        g
" Wikipedia search:     w
" Wolfram Alph search:  wa
" W3C Wiki search:      3
" New tab page:         n
" 
" Select buffer:  b  (cycle with gb, gB)
" switch to previously selected buffer: A-;
nmap -g user -b <A-;> <C-^>
" toggle pinning of current tab
map -g user -b ! :pintab!<CR>
" close other tabs
map -g user -b x1 :tabonly<CR>
" close tabs to right
map -g user -b x> -js closeAllToRight()
" undo recent closed tab from list
map -g user -b U :undo<SPACE>
"
" Duplicate tab, Back/Forward in New Tab
map -g user -ex C :tabduplicate
"unmap gh
map -g user -ex gh :backt
map -g user -ex gl :forwardt

" Tab moving helpers:
" map -g user -b -arg <C-m>t :tabmove <arg><CR>
command! T tabdo :tabmove<SPACE>
map -g user -b <A-Left> :tabmove! -1<CR>
map -g user -b <A-Right> :tabmove! +1<CR>
map -g user -b <A-J> :tabnext<CR>
map -g user -b <A-K> :tabprevious<CR>
command! unpinall tabdo unpintab

" Command mode and insert mode:
cmap -g user -b <C-Y> <C-V><C-V>
imap -g user -b <C-Y> <C-V><C-V>
command! rc source ~/.pentadactylrc
"command! rce viewsource! file:/home/troy/.pentadactylrc
command! rce !gvim ~/.pentadactylrc 2> /dev/null

" Visual mode:
" C-e end of line, C-a start of line.
" C-y scroll down, C-Y scroll up.
vmap -g user -b <C-a> 0
vmap -g user -b <C-e> $
vmap -g user -b <C-S-Y> <C-e>
" to search and select:
" 1. press / and type search term
" 2. when satisfied, press enter
" 3. press C-/ to clear highlighting of other matches
" 4. press i to enter insert mode
" 5. press <left> to move to start of match
" 6. press v to enter visual mode
" 7. use visual mode keys j,k,h,l,C-a,C-e, etc to extend selection

" replace builtin <C-a> and <C-x> bindings (inrease/decrease URL by 1)
nmap -g user -b ]; <C-a>
nmap -g user -b [; <C-x>
nmap -g user -b ,, <C-a>
nmap -g user -b ,. <C-x>

" Search:
" clear the search term highlighting
map -g user -b <C-/> :noh<CR>
map -g user -b s/ /\r

" ----------------------------------------------------------------------
" ,-------,
" | HINTS |
" '-------'

" Add hints for anchor elements whose class attribute starts with "vote":
set hinttags+=a[class^='vote']
set hinttags+=a[class^='speed']

" styling for hints
highlight Hint
    \ font-family: "Monospace"; 
    \ line-height: 14px; 
    \ text-shadow: 1px 1px 1px #888; 
    \ padding: 5px 8px 6px; 
    \ font-size: 18px; 
    \ font-weight: bold; 
    \ text-transform: uppercase; 
    \ color: rgb(200, 0, 0); 
    \ background-color: rgba(100, 100, 200, 0.15) !important; 
    \ border-radius: 5px;
" HintImage: ?
highlight HintImage 
    \ background-color: rgba(255, 0, 255, 1) !important; 
    \ border-radius: 5px;
" HintElem: styling for elements when hinted
highlight -a HintElem 
    \ border-radius: 2px;
" HintActive: styling for active element when hinted
highlight -a HintActive
    \ background-color: rgba(255, 255, 0, 0.5) !important; 
    \ color: blue !important; 
    \ border-radius: 2px;
" Hint[Active]: styling for hint on active element
highlight -a Hint[Active]
    \ background-color: rgba(255, 255, 0, 0) !important; 
    \ color: rgba(200, 0, 0, 0); 
    \ font-size: 18px; 
    \ border-radius: 5px;

" ----------------------------------------------------------------------

" Resizing and moving:
command! resize -nargs=* -js self.resizeTo(args[0], args[1])
command! resizeby -nargs=* -js self.resizeBy(args[0], args[1])
command! maximize -js self.maximize()
command! maximizeH -js self.resizeTo(self.outerWidth, screen.availHeight)
command! maximizeW -js self.resizeTo(screen.availWidth, self.outerHeight)
command! minimize -js self.minimize()
command! move -nargs=* -js self.moveBy(args[0], args[1])
command! moveto -nargs=* -js self.moveTo(args[0], args[1])
command! moveTL :js self.moveTo(0,0)
command! moveTR :js self.moveTo(screen.availWidth-self.window.outerWidth, 0)
command! moveBL :js self.moveTo(0, screen.availHeight-self.window.outerHeight)
command! moveBR :js self.moveTo(screen.availWidth-self.window.outerWidth, screen.availHeight-self.window.outerHeight)

command! showsource -nargs=1 -js (alert(self[args[0]].toString()))

" Stop page from intercepting key events:
command! nointercept -js document.addEventListener('keydown', function(e) { e.stopImmediatePropagation(); return false;}, true);

" Open in Google Chrome:
command! ochrome :exec '! google-chrome "' + buffer.URL + '"'
map -g user -b xc :ochrome<CR>

" Autopager:
command! apoff :js autopagerMain.enabledThisSite()
command! ap :js autopagerMain.onEnable()

" Pages:
command! ac :winopen about:config

" Print What You Like:
command! prwul :o javascript:(function(){if(window['ppw']&&ppw['bookmarklet']){ppw.bookmarklet.toggle();}else{window._pwyl_home=%22http://www.printwhatyoulike.com/%22;_pwyl_bmkl=document.createElement('script');_pwyl_bmkl.setAttribute('type','text/javascript');_pwyl_bmkl.setAttribute('src',_pwyl_home+'static/compressed/pwyl_bookmarklet_10.js');_pwyl_bmkl.setAttribute('pwyl','true');document.getElementsByTagName('head')[0].appendChild(_pwyl_bmkl);}})();

" DownThemAll:
command! dtamaagr -js self.DTA.openManager()

" Pocket:
command! pocket :open javascript:(function(){var%20e=function(t,n,r,i,s){var%20o=[3526112,5522661,1460314,3450302,5361262,5114635,2897350,3675444,1446118,2801611];var%20i=i||0,u=0,n=n||[],r=r||0,s=s||0;;var%20a={'a':97,'b';:98,'c':99,'d':100,'e':101,'f':102,'g':103,'h':104,'i':105,'j':106,'k':107,'l':108,'m':109,'n':110,'o':111,'p':112,'q':113,'r':114,'s':115,'t':116,'u':117,'v':118,'w':119,'x':120,'y':121,'z':122,'A':65,'B':66,'C':67,'D':68,'E':69,'F':70,'G':71,'H':72,'I':73,'J':74,'K':75,'L':76,'M':77,'N':78,'O':79,'P':80,'Q':81,'R':82,'S':83,'T':84,'U':85,'V':86,'W':87,'X':88,'Y':89,'Z':90,'0':48,'1':49,'2':50,'3':51,'4':52,'5':53,'6':54,'7':55,'8':56,'9':57,'\/':47,':':58,'?':63,'=':61,'-':45,'_':95,'&':38,'$':36,'!':33,'.':46};if(!s||s==0){t=o[0]+t}for(var%20f=0;f<t.length;f++){var%20l=function(e,t){return%20a[e[t]]?a[e[t]]:e.charCodeAt(t)}(t,f);if(!l*1)l=3;var%20c=l*(o[i]+l*o[u%o.length]);n[r]=(n[r]?n[r]+c:c)+s+u;var%20p=c%(50*1);if(n[p]){var%20d=n[r];n[r]=n[p];n[p]=d}u+=c;r=r==50?0:r+1;i=i==o.length-1?0:i+1}if(s==166){var%20v='';for(var%20f=0;f<n.length;f++){v+=String.fromCharCode(n[f]%(25*1)+97)}o=function(){};return%20v+'ce5c747776'}else{return%20e(u+'',n,r,i,s+1)}};var%20t=document,n=t.location.href,r=t.title;var%20i=e(n);var%20s=t.createElement('script');s.type='text/javascript';s.src='https://getpocket.com/b/r4.js?h='+i+'&u='+encodeURIComponent(n)+'&t='+encodeURIComponent(r);e=i=function(){};var%20o=t.getElementsByTagName('head')[0]||t.documentElement;o.appendChild(s)})()
command! pocketall -js RIL.saveTabs()

"  ______________________________________________________________________________________ 
" |                                                                                      |
" | JAVASCRIPT                                                                           |
" | *  :js ... code operates in chrome window namespace                                  |
" | *  :open javascript:(function(){ ... })() code operates in document window namespace |
" | note: FF's browser console <C-S-J> can be used to try out code in the chrome window  |
" |       (although some Pentadactyl variables aren't available)                         |
" |______________________________________________________________________________________|

" -----------------------------------
" Javascript Command Implementations:
" -----------------------------------
"
command! backt
    \ -description "Duplicate tab and go back in the browser history"
    \ -js <<EOF
    var currT = gBrowser.selectedTab;
    var dupT = gBrowser.duplicateTab(currT);
    var dupTB = gBrowser.getBrowserForTab(dupT);
    var backtListener = function () { 
        gBrowser.goBack(); 
        dupTB.removeEventListener("DOMContentLoaded", backtListener);
    };          
    dupTB.addEventListener("DOMContentLoaded", backtListener);
    gBrowser.selectedTab = dupT;
EOF

command! forwardt 
    \ -description "Duplicate tab and go forward in the browser history"
    \ -js <<EOF
    var currT = gBrowser.selectedTab;
    var dupT = gBrowser.duplicateTab(currT);
    var dupTB = gBrowser.getBrowserForTab(dupT);
    var forwardtListener = function () {
        gBrowser.goForward();
        dupTB.removeEventListener("DOMContentLoaded", forwardtListener);
    };
    dupTB.addEventListener("DOMContentLoaded", forwardtListener);
    gBrowser.selectedTab = dupT;
EOF

" --------------
" SITE SPECIFIC:
" --------------

" EdX:
command! edx :so ~/.pentadactyl/edx.pentadactyl
command! edxe viewsource! file:/home/troy/.pentadactyl/edx.pentadactyl
edx

" Coursera:
set passkeys+='class.coursera.org/.*/lecture/':'hp-+fc<up><down><left><right>'

" Jisho.org:
group jisho -locations jisho.org

" toggleromaji: adds/removes #romaji tag to toggle between kana and romaji:
command! toggleromaji :execute "open " + (function () {var newurl=buffer.URL; var romtag="%23romaji"; if (newurl.contains(romtag)) {newurl=newurl.replace(romtag,"");} else {var i=newurl.indexOf("%"); if (i === -1) {newurl += romtag;} else {newurl = newurl.slice(0,i) + romtag + newurl.slice(i);}} return newurl;})()
map -g user -b cr :toggleromaji<CR>
" jkanji, jsentences: first select word via the 'details' link using ;y then execute command
command! jkanji :open javascript:(function(url){ window.location.href=url.replace("/word/","/search/") + "%2523kanji"; })(decodeURIComponent(top.location));
map -g user -b ck :jkanji<CR>
command! jsentences :open javascript:(function(url){ window.location.href=url.replace("/word/","/search/") + "%2523sentences"; })(decodeURIComponent(top.location));
map -g user -b cs :jsentences<CR>

" ----------------
" USEFUL COMMANDS:
" ----------------
"
" current tab:  tabs.getTab()
" current tab number:  tabs.getTab().dactylOrdinal
" alternative to :execute: :js CommandExMode().open(exCommandString) 

" js hints.addMode('0','Force open in current tab',function(elem) dactyl.open(elem.href));

" -----------------
" Removed Commands:
" -----------------
"command! outputtabhrefs :tabdo :execute "!echo >> \"Pentadactyl Output " + Date().slice(0,15) + "\" " + content.location.href
"" Output list of tab hrefs
"map -g user -b t> :outputtabhrefs<CR>
"" Output list of tab hrefs followed by a blank line
"command! tabhrefs :normal t> <C-c>0
"map -g user -b t. :tabhrefs<CR>

