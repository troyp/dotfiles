#
# This script contains the instuctions generated by:
#     $(pyenv init -)
#     $(pyenv virtualenv-init -)
# So they can be inspected or partially executed.
# It doesn't need to be sourced if the above statements are eval'd in
# .zshenv/.bashrc/.bash_profile
#
# -------------------------------------------------------------------------------
# ,--------------,
# | pyenv init - |
# '--------------'

# add shims to front of $PATH
export PATH="/home/troy/.pyenv/shims:${PATH}"

# set $PYENV_SHELL
export PYENV_SHELL=zsh

# completions
source '/home/troy/.pyenv/completions/pyenv.zsh'

# rehash shims
command pyenv rehash 2>/dev/null

# define pyenv function (sh dispatcher), unless $PYENV_USE_SCRIPT
# -- this lets pyenv change variables in the shell session, allowing commands
#    like 'pyenv shell'.
if [[ -z $PYENV_USE_SCRIPT ]]; then
    pyenv() {
        local command
        command="$1"
        if [ "$#" -gt 0 ]; then
            shift
        fi

        case "$command" in
            activate|deactivate|rehash|shell)
                eval "$(pyenv "sh-$command" "$@")";;
            *)
                command pyenv "$command" "$@";;
        esac
    }
fi
# -------------------------------------------------------------------------------
# ,-------------------------,
# | pyenv virtualenv-init - |
# '-------------------------'
# enable auto-activation of virtualenvs
# otherwise, they can be manually activated with 'pyenv activate'

# add shims to front of $PATH
export PATH="/home/troy/.pyenv/plugins/pyenv-virtualenv/shims:${PATH}";

# set $PYENV-VIRTUALENV-INIT
export PYENV_VIRTUALENV_INIT=1;

_pyenv_virtualenv_hook() {
    local ret=$?
    if [ -n "$VIRTUAL_ENV" ]; then
        eval "$(pyenv sh-activate --quiet || pyenv sh-deactivate --quiet || true)" || true
    else
        eval "$(pyenv sh-activate --quiet || true)" || true
    fi
    return $ret
};
